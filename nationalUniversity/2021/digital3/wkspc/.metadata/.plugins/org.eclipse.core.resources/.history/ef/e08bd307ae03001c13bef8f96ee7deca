/*
===============================================================================
 Name        : pract1.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif

#include <cr_section_macros.h>

//TODO: insert other include files here

// Prototipos
unsigned char cfgGpio(char gpio,short int pin,char dir,char pullmode);
unsigned char getGpio(char gpio,char pin);
void setGpio(char gpio,char pin,char val);

int main(void) {

	//core init
	SystemInit();

	//gpio0 a digital output
	cfgGpio(0, 22, 'o', 'x');

	// Force the counter to be placed into memory
	volatile static unsigned int i = 0 ;

	//pin status
	unsigned char aux0;

	// Blink led
	while(1) {
		//pin off, led on
		//ssGpio0->FIOCLR=(1<<22);
		//LPC_GPIO0->FIOCLR=(1<<22);
		setGpio(0, 22, 0);

		//valor del pin
		aux0=getGpio(0, 22);

		//delay
		while(i!=1024*2000) i++;
		i=0;

		//pin on, led off
		//ssGpio0->FIOSET=(1<<22);
		//LPC_GPIO0->FIOSET=(1<<22);
		setGpio(0, 22, 1);

		//valor del pin
		aux0=getGpio(0, 22);

		//delay
		while(i!=1024*2000) i++;
		i=0;

	}

    return 0;
}

/*
 * Configurar gpio
 */
unsigned char cfgGpio(char gpio,short int pin,char dir,char pullmode){
	//seleccionar registros por gpio
	switch(gpio){
		case 0:
			//parte baja
			if(pin<16){
				/* Modo gpio
				 * 1<<r --> bit r=1, 1+N<<r --> bit r, y N bits siguientes = 1
				 * Si pin < 15 --> desplaza 2*pin bits, sino --> 2*pin-32 bits
				 */
				LPC_PINCON->PINSEL0&=~(0b11<<(2*pin));

				/*
				 * Pullmode
				 */
				//pull-up
				if(pullmode=='u') LPC_PINCON->PINMODE0&=~(0b11<<(2*pin));
				//pull-down
				else if(pullmode=='d') LPC_PINCON->PINMODE0|=(0b11<<(2*pin));
				//flotante (default)
				else LPC_PINCON->PINMODE0|=(0b10<<(2*pin));

				/*
				 * Direccion
				 */
			}
			//parte alta
			else{
				//modo gpio
				LPC_PINCON->PINSEL1&=~(0b11<<(2*pin-32));

				//pullmode
				//pull-up
				if(pullmode=='u') LPC_PINCON->PINMODE1&=~(0b11<<(2*pin));
				//pull-down
				else if(pullmode=='d') LPC_PINCON->PINMODE1|=(0b11<<(2*pin));
				//flotante (default)
				else LPC_PINCON->PINMODE1|=(0b10<<(2*pin));

			}


			//Configurar pullmode (default: ni pullup ni pulldown)
			//TOMANDO EL VALOR POR DEFAULT EN 0's
			if(pullmode=='u') LPC_PINCON->PINMODE1&=~(0b11<<(2*pin-32*(pin>15)));
			LPC_PINCON->PINMODE1|=0b10<<(2*pin-32*(pin>15));
			break;



		case 1:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		default
			break;

	}


	//Configurar direccion (default: salida)
	LPC_GPIO0->FIODIR|=(0b1<<pin);

	return 1;
}

/*
 * Configurar la funcion de un pin como gpio
 */
void cfgFunc(unsigned char gpio,unsigned short int pin){
	//parte baja
	if(pin<16)
	return;
}

/*
 * Configurar pullmode de un pin
 */

/*
 *
 */

/*
 * Retornar valor del pin p del Gpio x (Gx.p)
 */
unsigned char getGpio(char gpio,char pin){
	//guardar mascara actual
	unsigned int tmpMask=LPC_GPIO0->FIOMASK;

	//crear mascara para ver solo el pin pedido
	LPC_GPIO0->FIOMASK|=~(1<<pin);

	//leer valor por fiopin
	unsigned char stat=(LPC_GPIO0->FIOPIN)>>pin;

	//restaurar mascara anterior
	LPC_GPIO0->FIOMASK=tmpMask;

	return stat;
}

/*
 * Setear valor del pin p del Gpio x (Gx.p)
 */
void setGpio(char gpio,char pin,char val){
	//poner valor deseado en pin
	if(val==0) LPC_GPIO0->FIOPIN&=~(1<<pin);
	else LPC_GPIO0->FIOPIN|=(1<<pin);

	return;
}
